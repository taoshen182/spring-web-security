<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 由于本配置文件的默认schema空间为security 所以配置的所有beans  需要使用<beans:beans> xmlns="http://www.springframework.org/schema/security"  -->

    <!-- http 配置静态资源的访问权限-->
    <http pattern="/login.jsp" security="none"/><!-- 登录界面不进行安全过滤-->
    <http pattern="/user/login" security="none"/>
    <http pattern="/error.jsp" security="none"/><!-- 错误界面不进安全过滤-->
    <http pattern="/WEB-INF/jsp/*" security="none"/>
    <http pattern="/monitor/**" security="none"/> <!--访问监控的相关信息不进行拦截-->
    <!-- 配置自定义登录地址 -->
    <http name="hl" use-expressions="true" auto-config="false" entry-point-ref="authenticationLoginEntry">
        <!--关闭csrf (cross-sit request forgery ：跨站域伪造请求) 的安全保护 , 默认在4.1.2版本默认回加载次过滤器到过滤器连中的。
            遗留问题 1、 比如：不进行安全过滤的登录页面，没有通过csrfFilter过滤器，如何添加crsfToken到页面上去
                    2、 如果用户在填写表单正要提交时，session失效了  会导致提交请求csrf认证不通过，表单内容失效 用户体验差 -->
        <csrf disabled="true"/>
        <!--定制Http响应头信息， CSP（Content Security Policy : 内容安全策略）  -->
        <headers disabled="true" />
        <!--缺省Spring创建anonymous角色。当你规定角色是ROLE_ANONYMOUS’ 或‘IS_AUTHENTICATED_ANONYMOUSLY’, 任何人都可以访问资源-->
        <!--<intercept-url pattern="/user/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <!-- 注销过滤器 -->
        <custom-filter ref="logoutFilter" before="LOGOUT_FILTER" />
        <!--<custom-filter ref="adminLogoutFilter" position="LOGOUT_FILTER" />-->
        <!-- 登录过滤器 -->
        <custom-filter ref="authenticationProcessingFilter" before="FORM_LOGIN_FILTER" />

        <!--Remember Me  过滤器-->
        <custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER"/>

        <!-- 资源验证过滤器 -->
        <custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>

    </http>

     <!--重定向自定义登录地址 -->
    <beans:bean id="authenticationLoginEntry" class="com.gomefinance.hl.security.authentication.login.AuthenticationLoginEntry">
        <beans:property name="loginUrl" value="/user/login" />
    </beans:bean>

    <!--  -->
    <!--<beans:bean id="authenticationProcessingFilter"	class="com.gomefinance.hl.security.authentication.filter.AuthenticationProcessingFilter">-->
        <!--<beans:constructor-arg value="/login/check" />-->
        <!--<beans:property name="SessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />-->
        <!--<beans:property name="authenticationManager" ref="authenticationManager" />-->
        <!--<beans:property name="authenticationSuccessHandler"	ref="myAuthenticationSuccessHandler" />-->
        <!--<beans:property name="authenticationFailureHandler" ref="myAuthenticationFailureHandler" />-->
    <!--</beans:bean>-->

    <beans:bean id="authenticationProcessingFilter"	class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <!--<beans:constructor-arg value="/login/check" />-->
        <beans:property name="filterProcessesUrl" value="/login/check"/>
        <beans:property name="SessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="authenticationSuccessHandler"	ref="myAuthenticationSuccessHandler" />
        <beans:property name="authenticationFailureHandler" ref="myAuthenticationFailureHandler" />
        <beans:property name="rememberMeServices" ref="rememberMeServices"/>
    </beans:bean>

     <!--Remember-Me 对应的 Filter-->
    <beans:bean id="rememberMeFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
        <beans:constructor-arg name="authenticationManager" ref="authenticationManager"/>
        <beans:constructor-arg name="rememberMeServices" ref="rememberMeServices"/>
    </beans:bean>

    <beans:bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
        <beans:constructor-arg name="key" value="hl" />
        <beans:constructor-arg name="userDetailsService" ref="userDetailService"/>
        <!-- 指定 PersistentTokenRepository -->
        <beans:constructor-arg name="tokenRepository" ref="rememberMeTokenRepositoryImpl"/>
        <!-- 指定 request 中包含的用户是否选择了记住我的参数名 -->
        <beans:property name="parameter" value="rememberMe"/>
    </beans:bean>
    <!--获取userdetail 信息-->
    <beans:bean id="userDetailService" class="com.gomefinance.hl.security.authentication.provider.MyUserDetailsService"/>
    <beans:bean id="rememberMeTokenRepositoryImpl" class="com.gomefinance.hl.security.authentication.login.RememberMeTokenRepositoryImpl">
        <!-- 是否在系统启动时创建持久化 token 的数据库表 -->
        <beans:property name="createTableOnStartup" value="false"/>
    </beans:bean>



    <!-- 会话管理策略 -->
    <beans:bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
        <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <beans:property name="maximumSessions" value="1" />
        <beans:property name="exceptionIfMaximumExceeded" value="false" />
    </beans:bean>

    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

    <!-- authentication-manager 用来配置用户管理 认证信息-->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailService"/>
        <authentication-provider ref="rememberMeAuthenticationProvider" />
    </authentication-manager>
    <!--<beans:bean id="myAuthenticationProvider" class="com.gomefinance.hl.security.authentication.provider.MyAuthenticationProvider"/>-->

    <!-- key 值需与对应的 RememberMeServices 保持一致 -->
    <beans:bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
        <beans:constructor-arg name="key" value="hl"/>
    </beans:bean>
    <!--认证成功 处理逻辑-->
    <beans:bean id="myAuthenticationSuccessHandler" class="com.gomefinance.hl.security.authentication.handler.AuthenticationSuccessHandler">
        <!--<beans:property name="alwaysUseDefaultTargetUrl" value="true" />-->
        <beans:property name="defaultTargetUrl" value="/security/home"/>
    </beans:bean>
    <!--认证失败 处理逻辑-->
    <beans:bean id="myAuthenticationFailureHandler" class="com.gomefinance.hl.security.authentication.handler.AuthenticationFailureHandler">
        <beans:property name="defaultFailureUrl" value="/error.jsp"/>
    </beans:bean>


    <beans:bean id="securityFilter" class="com.gomefinance.hl.security.authentication.filter.MYFilterSecurityInterceptor" >
        <!--<beans:property name="observeOncePerRequest" value="true" />-->
        <!-- 资源访问决策 -->
        <beans:property name="accessDecisionManager" ref="accessDecisionManager" />
        <!-- 登陆的认证 -->
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <!--资源和权限列表 -->
        <beans:property name="securityMetadataSource" ref="securityMetadataSource" />
    </beans:bean>

    <!--权限列表（角色）、资源加载类-->
    <beans:bean id="securityMetadataSource"	class="com.gomefinance.hl.security.authentication.access.SecurityMetadataSource"/>
    <!--访问权限判决类-->
    <beans:bean id="accessDecisionManager" class="com.gomefinance.hl.security.authentication.access.AccessDecisionManager" />



     <!--注销管理   spring-boot项目需要注意将该拦截器，设置自动扫描配置-->
    <beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <!--需要拦截的注销登录的URL-->
        <beans:property name="filterProcessesUrl" value="/user/logout" />
        <!--业务系统注销成功后相关处理-->
        <beans:constructor-arg ref="logoutSuccessHandler"/>
        <!--spring Security 注销后的处理：session 置为失效，清空SecurityContextHolder中的Authentation 认证信息-->
        <beans:constructor-arg name="handlers">
            <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </beans:constructor-arg>
    </beans:bean>

    <!-- 业务系统注销成功后的相关处理-->
    <beans:bean id="logoutSuccessHandler" class="com.gomefinance.hl.security.authentication.handler.LogoutSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/user/login" /><!--注销成功的跳转页面-->
    </beans:bean>
</beans:beans>